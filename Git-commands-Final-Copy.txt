1)Log in to GitHub Account
2)Create Sample Repo (DemoRepo-1)
3)Launch Ec2(ubuntu 16.04) Instance
4)use git clone to make local repo 

git clone https://github.com/shashikanth-t/DemoRepo-1.git
ls
cd DemoRepo-1

	1)create a file
	2)add file to local repo
	3)commit the file to local repo
	4)push file from local repo to central repo

commands :

1)login to EC2 instance
2)sudo su
3)apt-get update -y
4)clear
5)git clone https://github.com/shashikanth-t/DemoRepo-1.git
6)ls
7)cd DemoRepo-1

8)git config --global user.email "xyz@gmail.com"
9)git config --global user.name "xyz"
10)nano ~/.gitconfig

10) nano 1.txt
11)ls
12)git status
13)git add 1.txt
14)git status
15)git commit -m "First Commit"
16)git status
17)git push origin main
18)git remote -v
19)git branch
20)git log
21)git log --oneline
22)git branch dev-1
23)git branch
24)git checkout dev-1
25)git branch
26)touch 3.txt 4.txt
27)git status
28)git add .
29)git status
30)git commit -m "dev-1:First commit"
31)git push origin dev-1
32)git checkout main
33)git branch dev-2
34)git branch
35)git branch -D dev-2

check in central repo.(refresh)

Last commit of Active branch will become first commit of new/child branch.


git remote -v
git remote add origin https://github.com/shashikanth-t/DemoRepo-1.git
git remote remove origin
git remote -v
git remote add origin https://github.com/shashikanth-t/sampleRepo-1.git


--------------------------------------------------------------------------------
To Get specific branch code from central repo to local repo :

git clone -b dev https://github.com/username/project.git

1)if you run command 

git reset <commit-id>

2)git reset
  files will move from stagging area to unstage area

  git reset  <commit-id> (last butone)
  Note : What are the changes are done after this commit id ,all are cancelled

reset --soft :
git reset --soft <commit-id>
Note : if we do soft reset ,commited data moved to stagging area.


reset --mixed :
git reset --mixed <commit-id> 
Note : if we do mixed reset ,commited data moved to untracked area.

reset --hard : 
git reset --hard <commit-id> 
Note : if we do hard reset ,commited data is removed.


#git reset Demo :

Scenario#1:

touch one.c
touch two.c
git status (un tracked mode red colour)
git add .
git status (tracked mode green colour)
git reset  (undo)
git status (un tracked mode red colour)


Scenario#2: undo after commit
nano one.c
nano two.c
git status (un tracked mode red colour)
git add .
git commit -m "Second commit"
git status
git reset 
git status
git reset <commit-id-1>

git reset HEAD~2  : to reset last 2 commits


3)git clean -f

4)git revert  : undo

  -it can undo specific changes
  -it generates log 

-----------------------------------------------------------------------
•	git diff
•	git diff HEAD~1 (latest commit -1)
•	git diff HEAD~2(latest commit -2)


-------------------------------------------------------------------------

Q) What's the difference between git fetch and git pull?


git fetch origin main

git fetch really only downloads new data from a remote repository.

but it doesn't integrate any of this new data into your working files.

Fetch is great for getting a "fresh view" on all the things that happened 
in a remote repository.

git pull origin main

to update your current HEAD branch with the latest changes from the remote server.
This means that pull not only downloads new data;
it also directly integrates it into your current working copy files.

git pull = git fetch + git merge;

Q)What is the difference between reset and revert?

both will do undo job.

if you done git reset it won't generate commitid.

if you do git revert it generates commitid.

git revert 8f766f97683e4b9ecb5b49a9381ae27b86fb9004
git log --oneline

-----------------------------------------------------------------------

Passwordless Authentication :

1)Login to EC2 instance
2)clone git repo
3)cd gitrepo
4)run below command

>ssh-keygen

>cd .ssh
>cat id_rsa.pub

copy text from here
5)Go to github account > Account Settings > ssh and GPG keys
  new SSH key

6)change the origin url from HTTPs to ssh

7)push new files from local repo to central repo.


git clone -b dev-1 https://github.com/shashikanth-t/demorepo-1.git

---------------------------------------------------------------------------------
stash : Temp commit 

git stash
git stash list
git stash apply similar to "git stash pop"
git stash clear

What is git stash drop?
Git ‘stash drop’ command is used to remove the stashed item. 

git squash ?
 
-- multiple commits can be set to single commit.

---------------------------------------------------------------------------------
ex#3:
git-checkout - Switch branches or restore working tree files

touch 1.txt
git add .
git commit -m "first commit"
git tag v1.0
git status
git log

touch 2.txt
git add .
git commit -m "second commit"
git tag v2.0
git status
git log
git status
git checkout <commit-id> or git checkout <tag>

Eg: git checkout v1.0

observation:

1)Here HEAD points to "first commit"
2)means cancells the "second commit"

Let us suppose Jerry accidentally modifies a file from his local repository. But he wants to undo his modification. To handle this situation, we can use the git checkout command.

----------------------------------------------------------------------------------
Q)Resetting, Checking Out & Reverting

The git reset, git checkout, and git revert commands are some of the most useful tools in your Git toolbox.

--> git revert a77ebd
    
The use of git revert is to create a new commit which reverts a previous commit.
The HEAD will point to the new reverting commit. 

--->git reset --hard f852d1d

The HEAD will point to the f852d1d(commitid). 
which removes the previous commit.

------------------------------------------------------------------------------------


git-clean - Remove untracked files from the working tree

git clean -f

touch 1.txt
git add .
git commit -m " First commit"
git tag v1.0

git log
touch 2.txt
git status
git clean -f
ls

Observation : here 2.txt is untracked file ,if we use "git clean -f",file will be removed from untracked mode 
(physically also )
----------------------------------------------------------------------------------------
git reflog :

Git keeps track of updates to the tip of branches using a mechanism called reference logs, or "reflogs.

 git reflog
--------------------------------------------------------------------------------------------

=====>   git cherry-pick <commit-id>

Assuming we have three commits but the bad commit is the second commit. 

 A ---- B ---- C (Head)

It's not a good idea to use git reset to rollback the commit B since we need to keep commit C as it is a good commit. 
Now we can "revert" commit C and B and then use "cherry-pick" to commit C again. 

 A ---- B ---- C  ----- C' ------B' ------C''(Head)
                     |                                    |
                      -----------cherry-pic ----

From above explanation, we can find out that the biggest difference between git reset and git revert is that git reset will reset the state of the branch to a previous state by dropping all the changes post the desired commit while git revert will reset to a previous state by creating new reverting commits and keep the original commits. It's recommended to use git revert instead of git reset in enterprise environment. 


What is git cherry-pick?
The command git cherry-pick is normally used to introduce particular commits from one branch within a repository onto a different branch.

--------------------------------------------------------------




